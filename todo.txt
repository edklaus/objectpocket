## Fragen ##
- Was passiert wenn man das gleiche Objekt einw eiteres mal hinzufügen will?
  - Was ist mit ID...
  - Nach load sind es zwei Objekte, die das selbe Objekt erepräsentieren!!

## HOSTSPOTS ##
- splitTopLevelJsonObjects braucht ca. 15%

(Speichern)
- Objektvergleich braucht relativ viel Zeit (tracedObjects)
- lässt sich mit hashCode optimieren -> Empfehlung in Doku

## BUGS ##
- Filter more than transient fields in ReferenceSupport???


## OPTIMIZATION POSSIBILITIES ##
- durch parallelisieren kriegt man beim laden nochmal ca. 15% speed zusätzlich 
- Man kann folgende Vorgänge parallelisieren:
  - Lesen der Dateien von Platte
  - Verarbeiten der gelesenen Strings (split, ...)
  - Umwandeln von JSON in Objekte
- Multithreading in Methode load() bringt schon viel Geschw.vorteil
- Es ist sicher noch besser jeden einzelnen Aufruf von "fromJson" an den ThreadPoolExecutor zu übergeben
  - So lässt sich sicherein maximaler Geschwindigkeitsvorteil rausholen
- Allerdings erzeugt es auch einige Fehler beim Zugriff auf Listen!!
  -> Hier muss man nochmal genau prüfen
- Auch beim store lässt sich sicher gut parallelisieren

## TODO ##
- zipFile remove files implementieren (s. filestore)
- blobzip: man kann keine kompressionsrate einstellen!!
- parallelisieren von Zugriffen beim Lesene / Schreiben
- UnitTests
- find Methode implementieren
- Write Profilen und mit anderen Implementierungen vergleichen
  - Write zur Zeit bei 	2310
  - Japer 				2398
  - JSON to Zip 		3922
- In den Support.injectReferences Methoden setProxy Methode aufrufen
- JSON Ausgabe überarbeiten (s. outline)
- setFilename für
  - Objekttypen
- Benchmark erstellen und Zielgruppe von Projekten definieren (Anwendungsfälle)
- Wie löschen??


### Wofür @Id?
- Es ist nicht notwendig um Referenzen aufzulösen
  - prinzipiell können Referenzen über erzeugte IDs intern gehandhabt werden, völlig transparent für den Nutzer
  - Einziger Sinn: Nutzer kann beim Browsen der Daten einfacher verstehen was referenziert ist
  - Weiterer Sinn: Auffinden von Objekten anhand ihrer ID über find

### find erweitern
- Es macht Sinn find so zu erweitern dass nach allen möglichen Objekten und Feldern gesucht werden kann
  - Wenn Objekte Inline gespeichert werden, sollten auch diese suchbar sein => komplexeres Auffinden von Referenzen
  - Alle Felder von Objekten durchsuchbar machen
    public <T> T find(String fieldname, Object value, Class<T> type);
    
### Ideen
- Automatisches nachladen von Änderungen wenn Speicherdatei per Hand oder von anderer Instanz geändert wurde
- Automatisches Speichern bei Änderungen
- Asynchrones Speichern
- tool for data inspection
- load asynchronous / tests
- multi instance usage / tests
- blob support 
  - cleanup
  - tests
- is the fully qualified name really necessary?
- data partitioning
  -> separate document
- write operations
  - how time consuming is a write operation?
  - is it possible to write only parts? (vertical partitioning)
- debug messages for add/persist
- map support
- use renaming to safely store files with FileObjectStore
- custom id with Annotation
- mapping support (reduce storage size)?
  - OneToMany, OneToOne, ManyToMany, ...
- ZipStore
- encryption support (file/zip?)
- versioning (history)
- field renaming support (@PreviousNames="...")
- class renaming support / class move to other package!
- time based snapshots (Can object changes be tracked?)
  - Bytecode Mnipulation (extend set/get)?
  - JMX
- time based auto-persist
- Adapters for MongoDB/ElasticSearch
- options for serialization exclusion (transient/static/...)
- extend find() operations to all available fields (like using SQL queries)
- add comments to json files. handy for handling configurations.
  - strip comments out automatically on load
  - add again on store
  - why JSON has no comments: http://stackoverflow.com/questions/244777/can-i-use-comments-inside-a-json-file